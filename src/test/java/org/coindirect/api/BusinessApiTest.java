/*
 * Coindirect
 * The Coindirect API is offered to all users to make use of our P2P Marketplace, Exchange and Wallets.
 *
 * OpenAPI spec version: 1
 * Contact: support@coindirect.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.coindirect.api;

import org.coindirect.api.invoker.ApiException;
import org.coindirect.api.model.AccessToken;
import org.coindirect.api.model.AccountDocument;
import org.coindirect.api.model.AccountInformation;
import org.coindirect.api.model.Errors;
import org.coindirect.api.model.Merchant;
import org.coindirect.api.model.PinAuthenticationRequest;
import org.coindirect.api.model.PublicMerchant;
import org.coindirect.api.model.UserRegistrationRequest;
import org.coindirect.api.model.WrappedPrimitiveString;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BusinessApi
 */
@Ignore
public class BusinessApiTest {

    private final BusinessApi api = new BusinessApi();

    /**
     * Create Merchant ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantIdCreateTest() throws ApiException {
        Merchant body = null;
        Merchant response = api.merchantIdCreate(body);

        // TODO: test validations
    }
    /**
     * Create Account Document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantUserDocumentCreateTest() throws ApiException {
        AccountDocument body = null;
        AccountDocument response = api.merchantUserDocumentCreate(body);

        // TODO: test validations
    }
    /**
     * Start Pin Authentication
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pinAuthenticationStartTest() throws ApiException {
        PinAuthenticationRequest body = null;
        AccessToken response = api.pinAuthenticationStart(body);

        // TODO: test validations
    }
    /**
     * Create new user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantCreateUserTest() throws ApiException {
        UserRegistrationRequest body = null;
        AccessToken response = api.merchantCreateUser(body);

        // TODO: test validations
    }
    /**
     * List Merchant IDs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantIdListTest() throws ApiException {
        List<PublicMerchant> response = api.merchantIdList();

        // TODO: test validations
    }
    /**
     * List Account Documents
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantUserDocumentListTest() throws ApiException {
        List<AccountDocument> response = api.merchantUserDocumentList();

        // TODO: test validations
    }
    /**
     * Complete Pin Authentication
     *
     * The pin is usable only once, if data is not correctly stored, you will need to issue a new pin
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pinAuthenticationCompleteTest() throws ApiException {
        WrappedPrimitiveString body = null;
        AccessToken response = api.pinAuthenticationComplete(body);

        // TODO: test validations
    }
    /**
     * Account Set Password
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantUserSetPasswordTest() throws ApiException {
        WrappedPrimitiveString body = null;
        api.merchantUserSetPassword(body);

        // TODO: test validations
    }
    /**
     * Read Account Information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantAccountInformationReadTest() throws ApiException {
        api.merchantAccountInformationRead();

        // TODO: test validations
    }
    /**
     * Update Account Information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantAccountInformationUpdateTest() throws ApiException {
        AccountInformation body = null;
        api.merchantAccountInformationUpdate(body);

        // TODO: test validations
    }
    /**
     * Read Merchant by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantReadByIdTest() throws ApiException {
        String id = null;
        PublicMerchant response = api.merchantReadById(id);

        // TODO: test validations
    }
    /**
     * Update Merchant ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void merchantIdUpdateTest() throws ApiException {
        String id = null;
        Merchant body = null;
        Merchant response = api.merchantIdUpdate(id, body);

        // TODO: test validations
    }
}
