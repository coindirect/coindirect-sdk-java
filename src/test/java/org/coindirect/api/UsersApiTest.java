/*
 * Coindirect
 * The Coindirect API is offered to all users to make use of our P2P Marketplace, Exchange and Wallets.
 *
 * OpenAPI spec version: 1
 * Contact: support@coindirect.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.coindirect.api;

import org.coindirect.api.invoker.ApiException;
import org.coindirect.api.model.AuthenticationToken;
import org.coindirect.api.model.AuthenticationTokenRequest;
import org.coindirect.api.model.EncodedFile;
import org.coindirect.api.model.Errors;
import org.coindirect.api.model.User;
import org.coindirect.api.model.UserForgotPasswordRequest;
import org.coindirect.api.model.UserPasswordChangeRequest;
import org.coindirect.api.model.UserProfile;
import org.coindirect.api.model.UserRegistrationRequest;
import org.coindirect.api.model.WrappedPrimitive;
import org.coindirect.api.model.WrappedString;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Forgot Password Request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beginForgotPasswordTest() throws ApiException {
        UserForgotPasswordRequest body = null;
        api.beginForgotPassword(body);

        // TODO: test validations
    }
    /**
     * Begin Two Factor Setup
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beginTwoFactorSetupTest() throws ApiException {
        WrappedString body = null;
        WrappedString response = api.beginTwoFactorSetup(body);

        // TODO: test validations
    }
    /**
     * Forgot Password Confirm Reset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmForgotPasswordTest() throws ApiException {
        UserForgotPasswordRequest body = null;
        api.confirmForgotPassword(body);

        // TODO: test validations
    }
    /**
     * Confirm new user registration
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmNewUserTest() throws ApiException {
        WrappedString body = null;
        api.confirmNewUser(body);

        // TODO: test validations
    }
    /**
     * Confirm Two Factor Code
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void confirmTwoFactorSetupTest() throws ApiException {
        WrappedString body = null;
        api.confirmTwoFactorSetup(body);

        // TODO: test validations
    }
    /**
     * Create API Key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createApiKeyTest() throws ApiException {
        AuthenticationTokenRequest body = null;
        api.createApiKey(body);

        // TODO: test validations
    }
    /**
     * Delete/Revoke API Key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteApiKeyTest() throws ApiException {
        String token = null;
        api.deleteApiKey(token);

        // TODO: test validations
    }
    /**
     * Get current user profile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProfileTest() throws ApiException {
        UserProfile response = api.getProfile();

        // TODO: test validations
    }
    /**
     * Check Two Factor Status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTwoFactorStatusTest() throws ApiException {
        Boolean response = api.getTwoFactorStatus();

        // TODO: test validations
    }
    /**
     * Get WebSocket Channel
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserWebsocketChannelTest() throws ApiException {
        WrappedPrimitive response = api.getUserWebsocketChannel();

        // TODO: test validations
    }
    /**
     * List API Keys
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listApiKeysTest() throws ApiException {
        List<AuthenticationToken> response = api.listApiKeys();

        // TODO: test validations
    }
    /**
     * Register a new user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerNewUserTest() throws ApiException {
        UserRegistrationRequest body = null;
        api.registerNewUser(body);

        // TODO: test validations
    }
    /**
     * Reissue Temporary Token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reissueApiTokenTest() throws ApiException {
        api.reissueApiToken();

        // TODO: test validations
    }
    /**
     * Resend verification email
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendVerificationEmailTest() throws ApiException {
        UserRegistrationRequest body = null;
        api.resendVerificationEmail(body);

        // TODO: test validations
    }
    /**
     * Update user password
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePasswordTest() throws ApiException {
        UserPasswordChangeRequest body = null;
        api.updatePassword(body);

        // TODO: test validations
    }
    /**
     * Update User Profile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProfileTest() throws ApiException {
        User body = null;
        User response = api.updateProfile(body);

        // TODO: test validations
    }
    /**
     * Update profile image
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProfileImageTest() throws ApiException {
        EncodedFile body = null;
        api.updateProfileImage(body);

        // TODO: test validations
    }
    /**
     * Update current user profile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProfile_0Test() throws ApiException {
        UserProfile body = null;
        UserProfile response = api.updateProfile_0(body);

        // TODO: test validations
    }
    /**
     * Upload ID verification document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadIdVerificationDocumentTest() throws ApiException {
        EncodedFile body = null;
        api.uploadIdVerificationDocument(body);

        // TODO: test validations
    }
}
