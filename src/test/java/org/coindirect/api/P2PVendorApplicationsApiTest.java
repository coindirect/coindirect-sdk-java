/*
 * Coindirect
 * The Coindirect API is offered to all users to make use of our P2P Marketplace, Exchange and Wallets.
 *
 * OpenAPI spec version: 1
 * Contact: support@coindirect.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.coindirect.api;

import org.coindirect.api.invoker.ApiException;
import org.coindirect.api.model.Errors;
import org.coindirect.api.model.PartnerApplication;
import org.coindirect.api.model.PartnerApplicationDocument;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for P2PVendorApplicationsApi
 */
@Ignore
public class P2PVendorApplicationsApiTest {

    private final P2PVendorApplicationsApi api = new P2PVendorApplicationsApi();

    /**
     * Apply to be a vendor
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createP2PVendorApplicationTest() throws ApiException {
        PartnerApplication body = null;
        PartnerApplication response = api.createP2PVendorApplication(body);

        // TODO: test validations
    }
    /**
     * Upload an application document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadP2PVendorApplicationDocumentTest() throws ApiException {
        Long applicationId = null;
        PartnerApplicationDocument body = null;
        PartnerApplicationDocument response = api.uploadP2PVendorApplicationDocument(applicationId, body);

        // TODO: test validations
    }
    /**
     * List Applications
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listP2PVendorApplicationsTest() throws ApiException {
        Integer offset = null;
        Integer max = null;
        List<PartnerApplication> response = api.listP2PVendorApplications(offset, max);

        // TODO: test validations
    }
    /**
     * Retrieve Application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getP2PVendorApplicationTest() throws ApiException {
        Long id = null;
        PartnerApplication response = api.getP2PVendorApplication(id);

        // TODO: test validations
    }
    /**
     * Cancel Application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelP2PVendorApplicationTest() throws ApiException {
        Long id = null;
        api.cancelP2PVendorApplication(id);

        // TODO: test validations
    }
}
