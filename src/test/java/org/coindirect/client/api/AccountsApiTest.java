/*
 * Coindirect
 * The Coindirect API is offered to all users to make use of our P2P Marketplace, Exchange and Wallets.
 *
 * OpenAPI spec version: 1
 * Contact: support@coindirect.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.coindirect.client.api;

import org.coindirect.client.invoker.ApiException;
import org.coindirect.client.model.AccountDocument;
import org.coindirect.client.model.AccountPreference;
import org.coindirect.client.model.AccountProgress;
import org.coindirect.client.model.AffiliateTransaction;
import org.coindirect.client.model.Errors;
import org.coindirect.client.model.Wallet;
import org.coindirect.client.model.WrappedPrimitive;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Ignore
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    
    /**
     * Upload a document for an account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAccountDocumentTest() throws ApiException {
        AccountDocument body = null;
        AccountDocument response = api.createAccountDocument(body);

        // TODO: test validations
    }
    
    /**
     * Read Account Preference
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountPreferenceTest() throws ApiException {
        String name = null;
        AccountPreference response = api.getAccountPreference(name);

        // TODO: test validations
    }
    
    /**
     * Check progress of account setup
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountProgressTest() throws ApiException {
        AccountProgress response = api.getAccountProgress();

        // TODO: test validations
    }
    
    /**
     * Get WebSocket Channel
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountWebsocketChannelTest() throws ApiException {
        WrappedPrimitive response = api.getAccountWebsocketChannel();

        // TODO: test validations
    }
    
    /**
     * Get affiliate code
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAffiliateCodeTest() throws ApiException {
        WrappedPrimitive response = api.getAffiliateCode();

        // TODO: test validations
    }
    
    /**
     * List uploaded documents for an account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAccountDocumentsTest() throws ApiException {
        List<AccountDocument> response = api.listAccountDocuments();

        // TODO: test validations
    }
    
    /**
     * List Account Preferences
     *
     * This will return a key/value object of the preferences that have been stored for this account.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAccountPreferencesTest() throws ApiException {
        Integer offset = null;
        Integer max = null;
        Map<String, Object> response = api.listAccountPreferences(offset, max);

        // TODO: test validations
    }
    
    /**
     * Get affiliate balances
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAffiliateBalancesTest() throws ApiException {
        List<Wallet> response = api.listAffiliateBalances();

        // TODO: test validations
    }
    
    /**
     * Get affiliate transactions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAffiliateTransactionsTest() throws ApiException {
        Integer offset = null;
        Integer max = null;
        List<AffiliateTransaction> response = api.listAffiliateTransactions(offset, max);

        // TODO: test validations
    }
    
    /**
     * Update Account Preference
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAccountPreferenceTest() throws ApiException {
        String name = null;
        AccountPreference body = null;
        AccountPreference response = api.updateAccountPreference(name, body);

        // TODO: test validations
    }
    
}
