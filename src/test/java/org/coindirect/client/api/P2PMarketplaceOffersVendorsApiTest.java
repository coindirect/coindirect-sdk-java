/*
 * Coindirect
 * The Coindirect API is offered to all users to make use of our P2P Marketplace, Exchange and Wallets.
 *
 * OpenAPI spec version: 1
 * Contact: support@coindirect.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.coindirect.client.api;

import org.coindirect.client.invoker.ApiException;
import org.coindirect.client.model.Equation;
import org.coindirect.client.model.Errors;
import org.coindirect.client.model.Exchange;
import org.coindirect.client.model.Offer;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for P2PMarketplaceOffersVendorsApi
 */
@Ignore
public class P2PMarketplaceOffersVendorsApiTest {

    private final P2PMarketplaceOffersVendorsApi api = new P2PMarketplaceOffersVendorsApi();

    
    /**
     * Create Offer to Buy
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createP2PBuyOfferTest() throws ApiException {
        Offer body = null;
        Offer response = api.createP2PBuyOffer(body);

        // TODO: test validations
    }
    
    /**
     * Create Offer to Sell
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createP2PSellOfferTest() throws ApiException {
        Offer body = null;
        Offer response = api.createP2PSellOffer(body);

        // TODO: test validations
    }
    
    /**
     * Delete Offer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteP2POfferTest() throws ApiException {
        Long id = null;
        api.deleteP2POffer(id);

        // TODO: test validations
    }
    
    /**
     * Execution Equation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void evaluateP2PEquationTest() throws ApiException {
        Equation body = null;
        Equation response = api.evaluateP2PEquation(body);

        // TODO: test validations
    }
    
    /**
     * Read an Offer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getP2POfferTest() throws ApiException {
        Long id = null;
        Offer response = api.getP2POffer(id);

        // TODO: test validations
    }
    
    /**
     * List Exchanges for Equations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listP2PExchangesTest() throws ApiException {
        List<Exchange> response = api.listP2PExchanges();

        // TODO: test validations
    }
    
    /**
     * List Offers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listP2POffersTest() throws ApiException {
        Integer offset = null;
        Integer max = null;
        List<Offer> response = api.listP2POffers(offset, max);

        // TODO: test validations
    }
    
    /**
     * List Variables for Equations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listP2PVariablesTest() throws ApiException {
        List<String> response = api.listP2PVariables();

        // TODO: test validations
    }
    
    /**
     * Update Offer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateP2POfferTest() throws ApiException {
        Long id = null;
        Offer body = null;
        Offer response = api.updateP2POffer(id, body);

        // TODO: test validations
    }
    
}
