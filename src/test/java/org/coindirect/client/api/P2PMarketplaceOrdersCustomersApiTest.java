/*
 * Coindirect
 * The Coindirect API is offered to all users to make use of our P2P Marketplace, Exchange and Wallets.
 *
 * OpenAPI spec version: 1
 * Contact: support@coindirect.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.coindirect.client.api;

import org.coindirect.client.invoker.ApiException;
import org.coindirect.client.model.Authorization;
import org.coindirect.client.model.Errors;
import org.coindirect.client.model.Order;
import org.coindirect.client.model.OrderDocument;
import org.coindirect.client.model.OrderRequest;
import org.coindirect.client.model.PaymentOption;
import org.coindirect.client.model.PaymentResult;
import org.coindirect.client.model.Rating;
import org.coindirect.client.model.WrappedPrimitive;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for P2PMarketplaceOrdersCustomersApi
 */
@Ignore
public class P2PMarketplaceOrdersCustomersApiTest {

    private final P2PMarketplaceOrdersCustomersApi api = new P2PMarketplaceOrdersCustomersApi();

    
    /**
     * Pre-authorize buy order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beginP2PBuyOrderTest() throws ApiException {
        OrderRequest body = null;
        Order response = api.beginP2PBuyOrder(body);

        // TODO: test validations
    }
    
    /**
     * Pre-authorize sell order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void beginP2PSellOrderTest() throws ApiException {
        OrderRequest body = null;
        Order response = api.beginP2PSellOrder(body);

        // TODO: test validations
    }
    
    /**
     * Cancel Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelP2POrderTest() throws ApiException {
        Long id = null;
        Authorization body = null;
        Order response = api.cancelP2POrder(id, body);

        // TODO: test validations
    }
    
    /**
     * Export Orders CSV
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportP2POrdersTest() throws ApiException {
        String fromDate = null;
        String toDate = null;
        api.exportP2POrders(fromDate, toDate);

        // TODO: test validations
    }
    
    /**
     * Get order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getP2POrderTest() throws ApiException {
        Long id = null;
        Order response = api.getP2POrder(id);

        // TODO: test validations
    }
    
    /**
     * View Upload Order Documentation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getP2POrderDocumentTest() throws ApiException {
        Long orderId = null;
        String document = null;
        WrappedPrimitive response = api.getP2POrderDocument(orderId, document);

        // TODO: test validations
    }
    
    /**
     * List Completed Orders
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listP2PCompletedOrdersTest() throws ApiException {
        List<Order> response = api.listP2PCompletedOrders();

        // TODO: test validations
    }
    
    /**
     * Get documents for Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listP2POrderDocumentsTest() throws ApiException {
        Long id = null;
        List<OrderDocument> response = api.listP2POrderDocuments(id);

        // TODO: test validations
    }
    
    /**
     * List Orders
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listP2POrdersTest() throws ApiException {
        List<Integer> status = null;
        Integer offset = null;
        Integer max = null;
        List<Order> response = api.listP2POrders(status, offset, max);

        // TODO: test validations
    }
    
    /**
     * List Pending Orders
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listP2PPendingOrdersTest() throws ApiException {
        List<Order> response = api.listP2PPendingOrders();

        // TODO: test validations
    }
    
    /**
     * Mark an order as paid (buyer)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markP2POrderAsPaidBuyerTest() throws ApiException {
        Long id = null;
        Order response = api.markP2POrderAsPaidBuyer(id);

        // TODO: test validations
    }
    
    /**
     * Mark an order as paid (seller)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void markP2POrderAsPaidSellerTest() throws ApiException {
        Long id = null;
        Order response = api.markP2POrderAsPaidSeller(id);

        // TODO: test validations
    }
    
    /**
     * Pay for order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void payP2POrderTest() throws ApiException {
        Long id = null;
        PaymentOption body = null;
        PaymentResult response = api.payP2POrder(id, body);

        // TODO: test validations
    }
    
    /**
     * Place Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void placeP2POrderTest() throws ApiException {
        Long id = null;
        Authorization body = null;
        Order response = api.placeP2POrder(id, body);

        // TODO: test validations
    }
    
    /**
     * Rate order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rateP2POrderTest() throws ApiException {
        Long id = null;
        Rating body = null;
        Order response = api.rateP2POrder(id, body);

        // TODO: test validations
    }
    
    /**
     * Update payment status for order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateP2POrderPaymentTest() throws ApiException {
        Long id = null;
        api.updateP2POrderPayment(id);

        // TODO: test validations
    }
    
    /**
     * Upload Order Documentation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadP2POrderDocumentTest() throws ApiException {
        Long id = null;
        OrderDocument body = null;
        api.uploadP2POrderDocument(id, body);

        // TODO: test validations
    }
    
}
