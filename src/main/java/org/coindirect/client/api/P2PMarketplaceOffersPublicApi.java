/*
 * Coindirect
 * The Coindirect API is offered to all users to make use of our P2P Marketplace, Exchange and Wallets.
 *
 * OpenAPI spec version: 1
 * Contact: support@coindirect.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.coindirect.client.api;

import org.coindirect.client.invoker.ApiCallback;
import org.coindirect.client.invoker.ApiClient;
import org.coindirect.client.invoker.ApiException;
import org.coindirect.client.invoker.ApiResponse;
import org.coindirect.client.invoker.Configuration;
import org.coindirect.client.invoker.Pair;
import org.coindirect.client.invoker.ProgressRequestBody;
import org.coindirect.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.coindirect.client.model.OfferToBuy;
import org.coindirect.client.model.OfferToSell;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class P2PMarketplaceOffersPublicApi {
    private ApiClient apiClient;

    public P2PMarketplaceOffersPublicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public P2PMarketplaceOffersPublicApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getP2POffer
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getP2POfferCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/public/offer/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getP2POfferValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getP2POffer(Async)");
        }
        

        com.squareup.okhttp.Call call = getP2POfferCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get offer information
     * 
     * @param id  (required)
     * @return OfferToSell
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OfferToSell getP2POffer(Long id) throws ApiException {
        ApiResponse<OfferToSell> resp = getP2POfferWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get offer information
     * 
     * @param id  (required)
     * @return ApiResponse&lt;OfferToSell&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OfferToSell> getP2POfferWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getP2POfferValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<OfferToSell>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get offer information (asynchronously)
     * 
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getP2POfferAsync(Long id, final ApiCallback<OfferToSell> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getP2POfferValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OfferToSell>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listP2PBuyOffers
     * @param currencyForSale  (required)
     * @param currencyAccepted  (required)
     * @param category  (optional)
     * @param type  (optional)
     * @param search  (optional)
     * @param affiliateCode  (optional)
     * @param countryCode  (optional)
     * @param offset start offset (optional, default to 0)
     * @param max max results (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listP2PBuyOffersCall(String currencyForSale, String currencyAccepted, Long category, Long type, String search, String affiliateCode, String countryCode, Integer offset, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/public/offer/buy/{currencyForSale}/{currencyAccepted}"
            .replaceAll("\\{" + "currencyForSale" + "\\}", apiClient.escapeString(currencyForSale.toString()))
            .replaceAll("\\{" + "currencyAccepted" + "\\}", apiClient.escapeString(currencyAccepted.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("category", category));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (affiliateCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("affiliateCode", affiliateCode));
        if (countryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("countryCode", countryCode));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max", max));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listP2PBuyOffersValidateBeforeCall(String currencyForSale, String currencyAccepted, Long category, Long type, String search, String affiliateCode, String countryCode, Integer offset, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'currencyForSale' is set
        if (currencyForSale == null) {
            throw new ApiException("Missing the required parameter 'currencyForSale' when calling listP2PBuyOffers(Async)");
        }
        
        // verify the required parameter 'currencyAccepted' is set
        if (currencyAccepted == null) {
            throw new ApiException("Missing the required parameter 'currencyAccepted' when calling listP2PBuyOffers(Async)");
        }
        

        com.squareup.okhttp.Call call = listP2PBuyOffersCall(currencyForSale, currencyAccepted, category, type, search, affiliateCode, countryCode, offset, max, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Find buy offers
     * 
     * @param currencyForSale  (required)
     * @param currencyAccepted  (required)
     * @param category  (optional)
     * @param type  (optional)
     * @param search  (optional)
     * @param affiliateCode  (optional)
     * @param countryCode  (optional)
     * @param offset start offset (optional, default to 0)
     * @param max max results (optional, default to 10)
     * @return List&lt;OfferToBuy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OfferToBuy> listP2PBuyOffers(String currencyForSale, String currencyAccepted, Long category, Long type, String search, String affiliateCode, String countryCode, Integer offset, Integer max) throws ApiException {
        ApiResponse<List<OfferToBuy>> resp = listP2PBuyOffersWithHttpInfo(currencyForSale, currencyAccepted, category, type, search, affiliateCode, countryCode, offset, max);
        return resp.getData();
    }

    /**
     * Find buy offers
     * 
     * @param currencyForSale  (required)
     * @param currencyAccepted  (required)
     * @param category  (optional)
     * @param type  (optional)
     * @param search  (optional)
     * @param affiliateCode  (optional)
     * @param countryCode  (optional)
     * @param offset start offset (optional, default to 0)
     * @param max max results (optional, default to 10)
     * @return ApiResponse&lt;List&lt;OfferToBuy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OfferToBuy>> listP2PBuyOffersWithHttpInfo(String currencyForSale, String currencyAccepted, Long category, Long type, String search, String affiliateCode, String countryCode, Integer offset, Integer max) throws ApiException {
        com.squareup.okhttp.Call call = listP2PBuyOffersValidateBeforeCall(currencyForSale, currencyAccepted, category, type, search, affiliateCode, countryCode, offset, max, null, null);
        Type localVarReturnType = new TypeToken<List<OfferToBuy>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find buy offers (asynchronously)
     * 
     * @param currencyForSale  (required)
     * @param currencyAccepted  (required)
     * @param category  (optional)
     * @param type  (optional)
     * @param search  (optional)
     * @param affiliateCode  (optional)
     * @param countryCode  (optional)
     * @param offset start offset (optional, default to 0)
     * @param max max results (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listP2PBuyOffersAsync(String currencyForSale, String currencyAccepted, Long category, Long type, String search, String affiliateCode, String countryCode, Integer offset, Integer max, final ApiCallback<List<OfferToBuy>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listP2PBuyOffersValidateBeforeCall(currencyForSale, currencyAccepted, category, type, search, affiliateCode, countryCode, offset, max, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OfferToBuy>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listP2PSellOffers
     * @param currencyForSale  (required)
     * @param currencyAccepted  (required)
     * @param category  (optional)
     * @param type  (optional)
     * @param search  (optional)
     * @param affiliateCode  (optional)
     * @param minimumAvailable  (optional)
     * @param countryCode  (optional)
     * @param offset start offset (optional, default to 0)
     * @param max max results (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listP2PSellOffersCall(String currencyForSale, String currencyAccepted, Long category, Long type, String search, String affiliateCode, BigDecimal minimumAvailable, String countryCode, Integer offset, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/public/offer/sell/{currencyForSale}/{currencyAccepted}"
            .replaceAll("\\{" + "currencyForSale" + "\\}", apiClient.escapeString(currencyForSale.toString()))
            .replaceAll("\\{" + "currencyAccepted" + "\\}", apiClient.escapeString(currencyAccepted.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("category", category));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (search != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search", search));
        if (affiliateCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("affiliateCode", affiliateCode));
        if (minimumAvailable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("minimumAvailable", minimumAvailable));
        if (countryCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("countryCode", countryCode));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max", max));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listP2PSellOffersValidateBeforeCall(String currencyForSale, String currencyAccepted, Long category, Long type, String search, String affiliateCode, BigDecimal minimumAvailable, String countryCode, Integer offset, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'currencyForSale' is set
        if (currencyForSale == null) {
            throw new ApiException("Missing the required parameter 'currencyForSale' when calling listP2PSellOffers(Async)");
        }
        
        // verify the required parameter 'currencyAccepted' is set
        if (currencyAccepted == null) {
            throw new ApiException("Missing the required parameter 'currencyAccepted' when calling listP2PSellOffers(Async)");
        }
        

        com.squareup.okhttp.Call call = listP2PSellOffersCall(currencyForSale, currencyAccepted, category, type, search, affiliateCode, minimumAvailable, countryCode, offset, max, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List sell offers
     * 
     * @param currencyForSale  (required)
     * @param currencyAccepted  (required)
     * @param category  (optional)
     * @param type  (optional)
     * @param search  (optional)
     * @param affiliateCode  (optional)
     * @param minimumAvailable  (optional)
     * @param countryCode  (optional)
     * @param offset start offset (optional, default to 0)
     * @param max max results (optional, default to 10)
     * @return List&lt;OfferToSell&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OfferToSell> listP2PSellOffers(String currencyForSale, String currencyAccepted, Long category, Long type, String search, String affiliateCode, BigDecimal minimumAvailable, String countryCode, Integer offset, Integer max) throws ApiException {
        ApiResponse<List<OfferToSell>> resp = listP2PSellOffersWithHttpInfo(currencyForSale, currencyAccepted, category, type, search, affiliateCode, minimumAvailable, countryCode, offset, max);
        return resp.getData();
    }

    /**
     * List sell offers
     * 
     * @param currencyForSale  (required)
     * @param currencyAccepted  (required)
     * @param category  (optional)
     * @param type  (optional)
     * @param search  (optional)
     * @param affiliateCode  (optional)
     * @param minimumAvailable  (optional)
     * @param countryCode  (optional)
     * @param offset start offset (optional, default to 0)
     * @param max max results (optional, default to 10)
     * @return ApiResponse&lt;List&lt;OfferToSell&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OfferToSell>> listP2PSellOffersWithHttpInfo(String currencyForSale, String currencyAccepted, Long category, Long type, String search, String affiliateCode, BigDecimal minimumAvailable, String countryCode, Integer offset, Integer max) throws ApiException {
        com.squareup.okhttp.Call call = listP2PSellOffersValidateBeforeCall(currencyForSale, currencyAccepted, category, type, search, affiliateCode, minimumAvailable, countryCode, offset, max, null, null);
        Type localVarReturnType = new TypeToken<List<OfferToSell>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List sell offers (asynchronously)
     * 
     * @param currencyForSale  (required)
     * @param currencyAccepted  (required)
     * @param category  (optional)
     * @param type  (optional)
     * @param search  (optional)
     * @param affiliateCode  (optional)
     * @param minimumAvailable  (optional)
     * @param countryCode  (optional)
     * @param offset start offset (optional, default to 0)
     * @param max max results (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listP2PSellOffersAsync(String currencyForSale, String currencyAccepted, Long category, Long type, String search, String affiliateCode, BigDecimal minimumAvailable, String countryCode, Integer offset, Integer max, final ApiCallback<List<OfferToSell>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listP2PSellOffersValidateBeforeCall(currencyForSale, currencyAccepted, category, type, search, affiliateCode, minimumAvailable, countryCode, offset, max, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OfferToSell>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
