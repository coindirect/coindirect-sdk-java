/*
 * Coindirect
 * The Coindirect API is offered to all users to make use of our P2P Marketplace, Exchange and Wallets.
 *
 * OpenAPI spec version: 1
 * Contact: support@coindirect.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.coindirect.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.coindirect.api.model.Country;
import org.coindirect.api.model.Currency;
import org.coindirect.api.model.PaymentMethod;
import org.coindirect.api.model.PaymentMethodType;
import org.coindirect.api.model.Wallet;
/**
 * Offer
 */


public class Offer {
  @JsonProperty("id")
  private Long id = null;

  @JsonProperty("currencyAccepted")
  private Currency currencyAccepted = null;

  @JsonProperty("currencyForSale")
  private Currency currencyForSale = null;

  @JsonProperty("fundingWallet")
  private Wallet fundingWallet = null;

  @JsonProperty("priceLimitHigher")
  private BigDecimal priceLimitHigher = null;

  @JsonProperty("priceLimitLower")
  private BigDecimal priceLimitLower = null;

  @JsonProperty("priceType")
  private String priceType = null;

  @JsonProperty("status")
  private Integer status = null;

  @JsonProperty("type")
  private String type = null;

  @JsonProperty("maximumOrderSize")
  private BigDecimal maximumOrderSize = null;

  @JsonProperty("minimumOrderSize")
  private BigDecimal minimumOrderSize = null;

  @JsonProperty("maximumOrderValue")
  private BigDecimal maximumOrderValue = null;

  @JsonProperty("minimumOrderValue")
  private BigDecimal minimumOrderValue = null;

  @JsonProperty("totalMaximumAmount")
  private BigDecimal totalMaximumAmount = null;

  @JsonProperty("price")
  private String price = null;

  @JsonProperty("notes")
  private String notes = null;

  @JsonProperty("expressionDetails")
  private String expressionDetails = null;

  @JsonProperty("paymentWindow")
  private Long paymentWindow = null;

  @JsonProperty("paymentMethods")
  private List<PaymentMethod> paymentMethods = null;

  @JsonProperty("paymentMethodTypes")
  private List<PaymentMethodType> paymentMethodTypes = null;

  @JsonProperty("features")
  private List<String> features = null;

  @JsonProperty("latestPrice")
  private BigDecimal latestPrice = null;

  @JsonProperty("countries")
  private List<Country> countries = null;

  public Offer id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Offer currencyAccepted(Currency currencyAccepted) {
    this.currencyAccepted = currencyAccepted;
    return this;
  }

   /**
   * Get currencyAccepted
   * @return currencyAccepted
  **/
  @Schema(description = "")
  public Currency getCurrencyAccepted() {
    return currencyAccepted;
  }

  public void setCurrencyAccepted(Currency currencyAccepted) {
    this.currencyAccepted = currencyAccepted;
  }

  public Offer currencyForSale(Currency currencyForSale) {
    this.currencyForSale = currencyForSale;
    return this;
  }

   /**
   * Get currencyForSale
   * @return currencyForSale
  **/
  @Schema(description = "")
  public Currency getCurrencyForSale() {
    return currencyForSale;
  }

  public void setCurrencyForSale(Currency currencyForSale) {
    this.currencyForSale = currencyForSale;
  }

  public Offer fundingWallet(Wallet fundingWallet) {
    this.fundingWallet = fundingWallet;
    return this;
  }

   /**
   * Get fundingWallet
   * @return fundingWallet
  **/
  @Schema(description = "")
  public Wallet getFundingWallet() {
    return fundingWallet;
  }

  public void setFundingWallet(Wallet fundingWallet) {
    this.fundingWallet = fundingWallet;
  }

  public Offer priceLimitHigher(BigDecimal priceLimitHigher) {
    this.priceLimitHigher = priceLimitHigher;
    return this;
  }

   /**
   * Get priceLimitHigher
   * @return priceLimitHigher
  **/
  @Schema(description = "")
  public BigDecimal getPriceLimitHigher() {
    return priceLimitHigher;
  }

  public void setPriceLimitHigher(BigDecimal priceLimitHigher) {
    this.priceLimitHigher = priceLimitHigher;
  }

  public Offer priceLimitLower(BigDecimal priceLimitLower) {
    this.priceLimitLower = priceLimitLower;
    return this;
  }

   /**
   * Get priceLimitLower
   * @return priceLimitLower
  **/
  @Schema(description = "")
  public BigDecimal getPriceLimitLower() {
    return priceLimitLower;
  }

  public void setPriceLimitLower(BigDecimal priceLimitLower) {
    this.priceLimitLower = priceLimitLower;
  }

  public Offer priceType(String priceType) {
    this.priceType = priceType;
    return this;
  }

   /**
   * Get priceType
   * @return priceType
  **/
  @Schema(description = "")
  public String getPriceType() {
    return priceType;
  }

  public void setPriceType(String priceType) {
    this.priceType = priceType;
  }

  public Offer status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }

  public Offer type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Offer maximumOrderSize(BigDecimal maximumOrderSize) {
    this.maximumOrderSize = maximumOrderSize;
    return this;
  }

   /**
   * Get maximumOrderSize
   * @return maximumOrderSize
  **/
  @Schema(description = "")
  public BigDecimal getMaximumOrderSize() {
    return maximumOrderSize;
  }

  public void setMaximumOrderSize(BigDecimal maximumOrderSize) {
    this.maximumOrderSize = maximumOrderSize;
  }

  public Offer minimumOrderSize(BigDecimal minimumOrderSize) {
    this.minimumOrderSize = minimumOrderSize;
    return this;
  }

   /**
   * Get minimumOrderSize
   * @return minimumOrderSize
  **/
  @Schema(description = "")
  public BigDecimal getMinimumOrderSize() {
    return minimumOrderSize;
  }

  public void setMinimumOrderSize(BigDecimal minimumOrderSize) {
    this.minimumOrderSize = minimumOrderSize;
  }

  public Offer maximumOrderValue(BigDecimal maximumOrderValue) {
    this.maximumOrderValue = maximumOrderValue;
    return this;
  }

   /**
   * Get maximumOrderValue
   * @return maximumOrderValue
  **/
  @Schema(description = "")
  public BigDecimal getMaximumOrderValue() {
    return maximumOrderValue;
  }

  public void setMaximumOrderValue(BigDecimal maximumOrderValue) {
    this.maximumOrderValue = maximumOrderValue;
  }

  public Offer minimumOrderValue(BigDecimal minimumOrderValue) {
    this.minimumOrderValue = minimumOrderValue;
    return this;
  }

   /**
   * Get minimumOrderValue
   * @return minimumOrderValue
  **/
  @Schema(description = "")
  public BigDecimal getMinimumOrderValue() {
    return minimumOrderValue;
  }

  public void setMinimumOrderValue(BigDecimal minimumOrderValue) {
    this.minimumOrderValue = minimumOrderValue;
  }

  public Offer totalMaximumAmount(BigDecimal totalMaximumAmount) {
    this.totalMaximumAmount = totalMaximumAmount;
    return this;
  }

   /**
   * Get totalMaximumAmount
   * @return totalMaximumAmount
  **/
  @Schema(description = "")
  public BigDecimal getTotalMaximumAmount() {
    return totalMaximumAmount;
  }

  public void setTotalMaximumAmount(BigDecimal totalMaximumAmount) {
    this.totalMaximumAmount = totalMaximumAmount;
  }

  public Offer price(String price) {
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @Schema(description = "")
  public String getPrice() {
    return price;
  }

  public void setPrice(String price) {
    this.price = price;
  }

  public Offer notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @Schema(description = "")
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }

  public Offer expressionDetails(String expressionDetails) {
    this.expressionDetails = expressionDetails;
    return this;
  }

   /**
   * Get expressionDetails
   * @return expressionDetails
  **/
  @Schema(description = "")
  public String getExpressionDetails() {
    return expressionDetails;
  }

  public void setExpressionDetails(String expressionDetails) {
    this.expressionDetails = expressionDetails;
  }

  public Offer paymentWindow(Long paymentWindow) {
    this.paymentWindow = paymentWindow;
    return this;
  }

   /**
   * Get paymentWindow
   * @return paymentWindow
  **/
  @Schema(description = "")
  public Long getPaymentWindow() {
    return paymentWindow;
  }

  public void setPaymentWindow(Long paymentWindow) {
    this.paymentWindow = paymentWindow;
  }

  public Offer paymentMethods(List<PaymentMethod> paymentMethods) {
    this.paymentMethods = paymentMethods;
    return this;
  }

  public Offer addPaymentMethodsItem(PaymentMethod paymentMethodsItem) {
    if (this.paymentMethods == null) {
      this.paymentMethods = new ArrayList<>();
    }
    this.paymentMethods.add(paymentMethodsItem);
    return this;
  }

   /**
   * Get paymentMethods
   * @return paymentMethods
  **/
  @Schema(description = "")
  public List<PaymentMethod> getPaymentMethods() {
    return paymentMethods;
  }

  public void setPaymentMethods(List<PaymentMethod> paymentMethods) {
    this.paymentMethods = paymentMethods;
  }

  public Offer paymentMethodTypes(List<PaymentMethodType> paymentMethodTypes) {
    this.paymentMethodTypes = paymentMethodTypes;
    return this;
  }

  public Offer addPaymentMethodTypesItem(PaymentMethodType paymentMethodTypesItem) {
    if (this.paymentMethodTypes == null) {
      this.paymentMethodTypes = new ArrayList<>();
    }
    this.paymentMethodTypes.add(paymentMethodTypesItem);
    return this;
  }

   /**
   * Get paymentMethodTypes
   * @return paymentMethodTypes
  **/
  @Schema(description = "")
  public List<PaymentMethodType> getPaymentMethodTypes() {
    return paymentMethodTypes;
  }

  public void setPaymentMethodTypes(List<PaymentMethodType> paymentMethodTypes) {
    this.paymentMethodTypes = paymentMethodTypes;
  }

  public Offer features(List<String> features) {
    this.features = features;
    return this;
  }

  public Offer addFeaturesItem(String featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

   /**
   * Get features
   * @return features
  **/
  @Schema(description = "")
  public List<String> getFeatures() {
    return features;
  }

  public void setFeatures(List<String> features) {
    this.features = features;
  }

  public Offer latestPrice(BigDecimal latestPrice) {
    this.latestPrice = latestPrice;
    return this;
  }

   /**
   * Get latestPrice
   * @return latestPrice
  **/
  @Schema(description = "")
  public BigDecimal getLatestPrice() {
    return latestPrice;
  }

  public void setLatestPrice(BigDecimal latestPrice) {
    this.latestPrice = latestPrice;
  }

  public Offer countries(List<Country> countries) {
    this.countries = countries;
    return this;
  }

  public Offer addCountriesItem(Country countriesItem) {
    if (this.countries == null) {
      this.countries = new ArrayList<>();
    }
    this.countries.add(countriesItem);
    return this;
  }

   /**
   * Get countries
   * @return countries
  **/
  @Schema(description = "")
  public List<Country> getCountries() {
    return countries;
  }

  public void setCountries(List<Country> countries) {
    this.countries = countries;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Offer offer = (Offer) o;
    return Objects.equals(this.id, offer.id) &&
        Objects.equals(this.currencyAccepted, offer.currencyAccepted) &&
        Objects.equals(this.currencyForSale, offer.currencyForSale) &&
        Objects.equals(this.fundingWallet, offer.fundingWallet) &&
        Objects.equals(this.priceLimitHigher, offer.priceLimitHigher) &&
        Objects.equals(this.priceLimitLower, offer.priceLimitLower) &&
        Objects.equals(this.priceType, offer.priceType) &&
        Objects.equals(this.status, offer.status) &&
        Objects.equals(this.type, offer.type) &&
        Objects.equals(this.maximumOrderSize, offer.maximumOrderSize) &&
        Objects.equals(this.minimumOrderSize, offer.minimumOrderSize) &&
        Objects.equals(this.maximumOrderValue, offer.maximumOrderValue) &&
        Objects.equals(this.minimumOrderValue, offer.minimumOrderValue) &&
        Objects.equals(this.totalMaximumAmount, offer.totalMaximumAmount) &&
        Objects.equals(this.price, offer.price) &&
        Objects.equals(this.notes, offer.notes) &&
        Objects.equals(this.expressionDetails, offer.expressionDetails) &&
        Objects.equals(this.paymentWindow, offer.paymentWindow) &&
        Objects.equals(this.paymentMethods, offer.paymentMethods) &&
        Objects.equals(this.paymentMethodTypes, offer.paymentMethodTypes) &&
        Objects.equals(this.features, offer.features) &&
        Objects.equals(this.latestPrice, offer.latestPrice) &&
        Objects.equals(this.countries, offer.countries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, currencyAccepted, currencyForSale, fundingWallet, priceLimitHigher, priceLimitLower, priceType, status, type, maximumOrderSize, minimumOrderSize, maximumOrderValue, minimumOrderValue, totalMaximumAmount, price, notes, expressionDetails, paymentWindow, paymentMethods, paymentMethodTypes, features, latestPrice, countries);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Offer {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    currencyAccepted: ").append(toIndentedString(currencyAccepted)).append("\n");
    sb.append("    currencyForSale: ").append(toIndentedString(currencyForSale)).append("\n");
    sb.append("    fundingWallet: ").append(toIndentedString(fundingWallet)).append("\n");
    sb.append("    priceLimitHigher: ").append(toIndentedString(priceLimitHigher)).append("\n");
    sb.append("    priceLimitLower: ").append(toIndentedString(priceLimitLower)).append("\n");
    sb.append("    priceType: ").append(toIndentedString(priceType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    maximumOrderSize: ").append(toIndentedString(maximumOrderSize)).append("\n");
    sb.append("    minimumOrderSize: ").append(toIndentedString(minimumOrderSize)).append("\n");
    sb.append("    maximumOrderValue: ").append(toIndentedString(maximumOrderValue)).append("\n");
    sb.append("    minimumOrderValue: ").append(toIndentedString(minimumOrderValue)).append("\n");
    sb.append("    totalMaximumAmount: ").append(toIndentedString(totalMaximumAmount)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    expressionDetails: ").append(toIndentedString(expressionDetails)).append("\n");
    sb.append("    paymentWindow: ").append(toIndentedString(paymentWindow)).append("\n");
    sb.append("    paymentMethods: ").append(toIndentedString(paymentMethods)).append("\n");
    sb.append("    paymentMethodTypes: ").append(toIndentedString(paymentMethodTypes)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    latestPrice: ").append(toIndentedString(latestPrice)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
