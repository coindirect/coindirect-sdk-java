/*
 * Coindirect
 * The Coindirect API is offered to all users to make use of our P2P Marketplace, Exchange and Wallets.
 *
 * OpenAPI spec version: 1
 * Contact: support@coindirect.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.coindirect.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.coindirect.api.model.CurrencyWithdrawalParameter;
/**
 * Currency
 */


public class Currency {
  @JsonProperty("id")
  private Long id = null;

  @JsonProperty("code")
  private String code = null;

  @JsonProperty("fiat")
  private Boolean fiat = false;

  @JsonProperty("icon")
  private String icon = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("withdrawalParameters")
  private List<CurrencyWithdrawalParameter> withdrawalParameters = null;

  @JsonProperty("options")
  private Map<String, Object> options = null;

  @JsonProperty("withdrawalFee")
  private BigDecimal withdrawalFee = null;

  @JsonProperty("depositFee")
  private BigDecimal depositFee = null;

  @JsonProperty("supportsDeposits")
  private Boolean supportsDeposits = false;

  @JsonProperty("supportsWithdrawals")
  private Boolean supportsWithdrawals = false;

  public Currency id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Currency code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @Schema(description = "")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public Currency fiat(Boolean fiat) {
    this.fiat = fiat;
    return this;
  }

   /**
   * Get fiat
   * @return fiat
  **/
  @Schema(description = "")
  public Boolean isFiat() {
    return fiat;
  }

  public void setFiat(Boolean fiat) {
    this.fiat = fiat;
  }

  public Currency icon(String icon) {
    this.icon = icon;
    return this;
  }

   /**
   * Get icon
   * @return icon
  **/
  @Schema(description = "")
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }

  public Currency name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Currency withdrawalParameters(List<CurrencyWithdrawalParameter> withdrawalParameters) {
    this.withdrawalParameters = withdrawalParameters;
    return this;
  }

  public Currency addWithdrawalParametersItem(CurrencyWithdrawalParameter withdrawalParametersItem) {
    if (this.withdrawalParameters == null) {
      this.withdrawalParameters = new ArrayList<>();
    }
    this.withdrawalParameters.add(withdrawalParametersItem);
    return this;
  }

   /**
   * Get withdrawalParameters
   * @return withdrawalParameters
  **/
  @Schema(description = "")
  public List<CurrencyWithdrawalParameter> getWithdrawalParameters() {
    return withdrawalParameters;
  }

  public void setWithdrawalParameters(List<CurrencyWithdrawalParameter> withdrawalParameters) {
    this.withdrawalParameters = withdrawalParameters;
  }

  public Currency options(Map<String, Object> options) {
    this.options = options;
    return this;
  }

  public Currency putOptionsItem(String key, Object optionsItem) {
    if (this.options == null) {
      this.options = new HashMap<>();
    }
    this.options.put(key, optionsItem);
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @Schema(description = "")
  public Map<String, Object> getOptions() {
    return options;
  }

  public void setOptions(Map<String, Object> options) {
    this.options = options;
  }

  public Currency withdrawalFee(BigDecimal withdrawalFee) {
    this.withdrawalFee = withdrawalFee;
    return this;
  }

   /**
   * Get withdrawalFee
   * @return withdrawalFee
  **/
  @Schema(description = "")
  public BigDecimal getWithdrawalFee() {
    return withdrawalFee;
  }

  public void setWithdrawalFee(BigDecimal withdrawalFee) {
    this.withdrawalFee = withdrawalFee;
  }

  public Currency depositFee(BigDecimal depositFee) {
    this.depositFee = depositFee;
    return this;
  }

   /**
   * Get depositFee
   * @return depositFee
  **/
  @Schema(description = "")
  public BigDecimal getDepositFee() {
    return depositFee;
  }

  public void setDepositFee(BigDecimal depositFee) {
    this.depositFee = depositFee;
  }

  public Currency supportsDeposits(Boolean supportsDeposits) {
    this.supportsDeposits = supportsDeposits;
    return this;
  }

   /**
   * Get supportsDeposits
   * @return supportsDeposits
  **/
  @Schema(description = "")
  public Boolean isSupportsDeposits() {
    return supportsDeposits;
  }

  public void setSupportsDeposits(Boolean supportsDeposits) {
    this.supportsDeposits = supportsDeposits;
  }

  public Currency supportsWithdrawals(Boolean supportsWithdrawals) {
    this.supportsWithdrawals = supportsWithdrawals;
    return this;
  }

   /**
   * Get supportsWithdrawals
   * @return supportsWithdrawals
  **/
  @Schema(description = "")
  public Boolean isSupportsWithdrawals() {
    return supportsWithdrawals;
  }

  public void setSupportsWithdrawals(Boolean supportsWithdrawals) {
    this.supportsWithdrawals = supportsWithdrawals;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Currency currency = (Currency) o;
    return Objects.equals(this.id, currency.id) &&
        Objects.equals(this.code, currency.code) &&
        Objects.equals(this.fiat, currency.fiat) &&
        Objects.equals(this.icon, currency.icon) &&
        Objects.equals(this.name, currency.name) &&
        Objects.equals(this.withdrawalParameters, currency.withdrawalParameters) &&
        Objects.equals(this.options, currency.options) &&
        Objects.equals(this.withdrawalFee, currency.withdrawalFee) &&
        Objects.equals(this.depositFee, currency.depositFee) &&
        Objects.equals(this.supportsDeposits, currency.supportsDeposits) &&
        Objects.equals(this.supportsWithdrawals, currency.supportsWithdrawals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, code, fiat, icon, name, withdrawalParameters, options, withdrawalFee, depositFee, supportsDeposits, supportsWithdrawals);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Currency {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    fiat: ").append(toIndentedString(fiat)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    withdrawalParameters: ").append(toIndentedString(withdrawalParameters)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    withdrawalFee: ").append(toIndentedString(withdrawalFee)).append("\n");
    sb.append("    depositFee: ").append(toIndentedString(depositFee)).append("\n");
    sb.append("    supportsDeposits: ").append(toIndentedString(supportsDeposits)).append("\n");
    sb.append("    supportsWithdrawals: ").append(toIndentedString(supportsWithdrawals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
