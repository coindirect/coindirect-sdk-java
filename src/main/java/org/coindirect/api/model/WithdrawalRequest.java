/*
 * Coindirect
 * The Coindirect API is offered to all users to make use of our P2P Marketplace, Exchange and Wallets.
 *
 * OpenAPI spec version: 1
 * Contact: support@coindirect.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.coindirect.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import org.coindirect.api.model.Wallet;
/**
 * WithdrawalRequest
 */


public class WithdrawalRequest {
  @JsonProperty("id")
  private Long id = null;

  @JsonProperty("approved")
  private Boolean approved = false;

  @JsonProperty("dateApproved")
  private OffsetDateTime dateApproved = null;

  @JsonProperty("dateCreated")
  private OffsetDateTime dateCreated = null;

  @JsonProperty("lastUpdated")
  private OffsetDateTime lastUpdated = null;

  @JsonProperty("notes")
  private String notes = null;

  @JsonProperty("processed")
  private Boolean processed = false;

  @JsonProperty("serializedRequest")
  private String serializedRequest = null;

  @JsonProperty("wallet")
  private Wallet wallet = null;

  @JsonProperty("hash")
  private String hash = null;

  @JsonProperty("amount")
  private BigDecimal amount = null;

  @JsonProperty("message")
  private String message = null;

  public WithdrawalRequest id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public WithdrawalRequest approved(Boolean approved) {
    this.approved = approved;
    return this;
  }

   /**
   * Get approved
   * @return approved
  **/
  @Schema(description = "")
  public Boolean isApproved() {
    return approved;
  }

  public void setApproved(Boolean approved) {
    this.approved = approved;
  }

  public WithdrawalRequest dateApproved(OffsetDateTime dateApproved) {
    this.dateApproved = dateApproved;
    return this;
  }

   /**
   * Get dateApproved
   * @return dateApproved
  **/
  @Schema(description = "")
  public OffsetDateTime getDateApproved() {
    return dateApproved;
  }

  public void setDateApproved(OffsetDateTime dateApproved) {
    this.dateApproved = dateApproved;
  }

  public WithdrawalRequest dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @Schema(description = "")
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }

  public WithdrawalRequest lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  @Schema(description = "")
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }

  public WithdrawalRequest notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @Schema(description = "")
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }

  public WithdrawalRequest processed(Boolean processed) {
    this.processed = processed;
    return this;
  }

   /**
   * Get processed
   * @return processed
  **/
  @Schema(description = "")
  public Boolean isProcessed() {
    return processed;
  }

  public void setProcessed(Boolean processed) {
    this.processed = processed;
  }

  public WithdrawalRequest serializedRequest(String serializedRequest) {
    this.serializedRequest = serializedRequest;
    return this;
  }

   /**
   * Get serializedRequest
   * @return serializedRequest
  **/
  @Schema(description = "")
  public String getSerializedRequest() {
    return serializedRequest;
  }

  public void setSerializedRequest(String serializedRequest) {
    this.serializedRequest = serializedRequest;
  }

  public WithdrawalRequest wallet(Wallet wallet) {
    this.wallet = wallet;
    return this;
  }

   /**
   * Get wallet
   * @return wallet
  **/
  @Schema(description = "")
  public Wallet getWallet() {
    return wallet;
  }

  public void setWallet(Wallet wallet) {
    this.wallet = wallet;
  }

  public WithdrawalRequest hash(String hash) {
    this.hash = hash;
    return this;
  }

   /**
   * Get hash
   * @return hash
  **/
  @Schema(description = "")
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }

  public WithdrawalRequest amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @Schema(description = "")
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  public WithdrawalRequest message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @Schema(description = "")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WithdrawalRequest withdrawalRequest = (WithdrawalRequest) o;
    return Objects.equals(this.id, withdrawalRequest.id) &&
        Objects.equals(this.approved, withdrawalRequest.approved) &&
        Objects.equals(this.dateApproved, withdrawalRequest.dateApproved) &&
        Objects.equals(this.dateCreated, withdrawalRequest.dateCreated) &&
        Objects.equals(this.lastUpdated, withdrawalRequest.lastUpdated) &&
        Objects.equals(this.notes, withdrawalRequest.notes) &&
        Objects.equals(this.processed, withdrawalRequest.processed) &&
        Objects.equals(this.serializedRequest, withdrawalRequest.serializedRequest) &&
        Objects.equals(this.wallet, withdrawalRequest.wallet) &&
        Objects.equals(this.hash, withdrawalRequest.hash) &&
        Objects.equals(this.amount, withdrawalRequest.amount) &&
        Objects.equals(this.message, withdrawalRequest.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, approved, dateApproved, dateCreated, lastUpdated, notes, processed, serializedRequest, wallet, hash, amount, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WithdrawalRequest {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    approved: ").append(toIndentedString(approved)).append("\n");
    sb.append("    dateApproved: ").append(toIndentedString(dateApproved)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    processed: ").append(toIndentedString(processed)).append("\n");
    sb.append("    serializedRequest: ").append(toIndentedString(serializedRequest)).append("\n");
    sb.append("    wallet: ").append(toIndentedString(wallet)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
