/*
 * Coindirect
 * The Coindirect API is offered to all users to make use of our P2P Marketplace, Exchange and Wallets.
 *
 * OpenAPI spec version: 1
 * Contact: support@coindirect.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.coindirect.api.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import org.coindirect.api.model.Currency;
import org.coindirect.api.model.Wallet;
/**
 * TransferRequest
 */


public class TransferRequest {
  @JsonProperty("id")
  private Long id = null;

  @JsonProperty("dateCreated")
  private OffsetDateTime dateCreated = null;

  @JsonProperty("fromWallet")
  private Wallet fromWallet = null;

  @JsonProperty("inputAmount")
  private BigDecimal inputAmount = null;

  @JsonProperty("outputAmount")
  private BigDecimal outputAmount = null;

  @JsonProperty("status")
  private Integer status = null;

  @JsonProperty("toWallet")
  private Wallet toWallet = null;

  @JsonProperty("toCurrency")
  private Currency toCurrency = null;

  public TransferRequest id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public TransferRequest dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Get dateCreated
   * @return dateCreated
  **/
  @Schema(description = "")
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }

  public TransferRequest fromWallet(Wallet fromWallet) {
    this.fromWallet = fromWallet;
    return this;
  }

   /**
   * Get fromWallet
   * @return fromWallet
  **/
  @Schema(description = "")
  public Wallet getFromWallet() {
    return fromWallet;
  }

  public void setFromWallet(Wallet fromWallet) {
    this.fromWallet = fromWallet;
  }

  public TransferRequest inputAmount(BigDecimal inputAmount) {
    this.inputAmount = inputAmount;
    return this;
  }

   /**
   * Get inputAmount
   * @return inputAmount
  **/
  @Schema(description = "")
  public BigDecimal getInputAmount() {
    return inputAmount;
  }

  public void setInputAmount(BigDecimal inputAmount) {
    this.inputAmount = inputAmount;
  }

  public TransferRequest outputAmount(BigDecimal outputAmount) {
    this.outputAmount = outputAmount;
    return this;
  }

   /**
   * Get outputAmount
   * @return outputAmount
  **/
  @Schema(description = "")
  public BigDecimal getOutputAmount() {
    return outputAmount;
  }

  public void setOutputAmount(BigDecimal outputAmount) {
    this.outputAmount = outputAmount;
  }

  public TransferRequest status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }

  public TransferRequest toWallet(Wallet toWallet) {
    this.toWallet = toWallet;
    return this;
  }

   /**
   * Get toWallet
   * @return toWallet
  **/
  @Schema(description = "")
  public Wallet getToWallet() {
    return toWallet;
  }

  public void setToWallet(Wallet toWallet) {
    this.toWallet = toWallet;
  }

  public TransferRequest toCurrency(Currency toCurrency) {
    this.toCurrency = toCurrency;
    return this;
  }

   /**
   * Get toCurrency
   * @return toCurrency
  **/
  @Schema(description = "")
  public Currency getToCurrency() {
    return toCurrency;
  }

  public void setToCurrency(Currency toCurrency) {
    this.toCurrency = toCurrency;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferRequest transferRequest = (TransferRequest) o;
    return Objects.equals(this.id, transferRequest.id) &&
        Objects.equals(this.dateCreated, transferRequest.dateCreated) &&
        Objects.equals(this.fromWallet, transferRequest.fromWallet) &&
        Objects.equals(this.inputAmount, transferRequest.inputAmount) &&
        Objects.equals(this.outputAmount, transferRequest.outputAmount) &&
        Objects.equals(this.status, transferRequest.status) &&
        Objects.equals(this.toWallet, transferRequest.toWallet) &&
        Objects.equals(this.toCurrency, transferRequest.toCurrency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, dateCreated, fromWallet, inputAmount, outputAmount, status, toWallet, toCurrency);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferRequest {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    fromWallet: ").append(toIndentedString(fromWallet)).append("\n");
    sb.append("    inputAmount: ").append(toIndentedString(inputAmount)).append("\n");
    sb.append("    outputAmount: ").append(toIndentedString(outputAmount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    toWallet: ").append(toIndentedString(toWallet)).append("\n");
    sb.append("    toCurrency: ").append(toIndentedString(toCurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
